<?phpnamespace frontend\controllers\frontend;use yii\web\Controller;use yii\web\Cookie;use Yii;abstract class BaseController extends Controller{	    public $baseUrl;    public $title_extend = " | Trao gửi yêu thương";    public $title;    public $description;    public $keywrod;    public $og;    public $canonical;    public $var = [];    protected $_name;            public function init()    {        parent::init(); // TODO: Change the autogenerated stub        $this->_name = get_class($this);        $this->baseUrl = 'ws';        $this->layout = "@app/views/frontend/layouts/main";        $this->mDefault();    }    /**     * config default     */    private function mDefault() {        $this->title = "";        $this->keywrod = "";        $this->description = "";        /**         * config default og         */        $this->og = [            "title" => "",            "site_name" => "",            "url" => $this->baseUrl,            "image" => "",            "description" => $this->description,        ];        $this->canonical = $this->baseUrl;            }    /**     * Config meta     * @param type $title     * @param type $description     * @param type $url     * @param type $image     * @param type $keyword     */    protected function meta($title = null, $description = null, $keyword = null, $url = null, $image = null) {        if ($title != null) {            $this->title = $title . $this->title_extend;            $this->og['title'] = $title;        }        if ($description != null) {            $this->description = $description;            $this->og['description'] = $this->description;        }        if ($keyword != null) {            $this->keywrod = $keyword;        }        if ($url != null) {            $this->canonical = $url;            $this->og['url'] = $this->canonical;        }        if ($image != null) {            $this->og['image'] = $image;        }    }    /**     * @param type $message     * @param type $error     * @return type     */    protected function message($message, $error = false) {        $this->var['menu'] = false;        $this->var['box_header'] = false;        $this->var['box_search'] = 'full';        $this->var['box_footer'] = false;        return $this->render("//error/alert", [            'success' => $error,            'message' => $message,        ]);    }    function generateSchema($rules) {        $arr_type_temp = [];        foreach ($rules as $item) {            switch ($item[1]) {                case 'number':                case 'integer':                    foreach ($item[0] as $item1) {                        if($item1 != 'id')                            $arr_type_temp[$item1]['type'] = 'number';                        if($item1 == 'siteId' || $item1 == 'StoreId') {                            $arr_type_temp['id']['editable'] = false;                        }                    }                    break;                case 'string':                    foreach ($item[0] as $item1) {                        if($item1 != 'id')                            $arr_type_temp[$item1]['type'] = 'string';                    }                    break;                case 'safe':                    foreach ($item[0] as $item1) {                        if($item1 != 'id')                            $arr_type_temp[$item1]['type'] = 'date';                    }                    break;                                default:                    break;            }        }        $arr_type_temp['id']['editable'] = false;        $arr_type_temp['id']['nullable'] = true;        return              [                'id' => 'id',                'fields' => $arr_type_temp            ];    }}